module train_game_logic(
    input logic clk,               // Clock signal
    input logic reset,             // Reset signal
    output logic [9:0] pixel_row,  // Row of the current pixel
    output logic [9:0] pixel_column, // Column of the current pixel
    output logic [7:0] red,        // Red color for the pixel
    output logic [7:0] green,      // Green color for the pixel
    output logic [7:0] blue,       // Blue color for the pixel
    output logic video_on          // Indicates if pixel is active
);

    // Train positions
    logic [9:0] train_a_pos;
    logic [9:0] train_b_pos;

    // Train movement logic
    always_ff @(posedge clk or posedge reset) begin
        if (reset) begin
            train_a_pos <= 10'd60;  // Initial position of train A
            train_b_pos <= 10'd120; // Initial position of train B
        end else begin
            train_a_pos <= (train_a_pos < 420) ? train_a_pos + 1 : 60; // Loop for train A
            train_b_pos <= (train_b_pos < 520) ? train_b_pos + 1 : 120; // Loop for train B
        end
    end

    // VGA output logic
    always_comb begin
        red = 8'b0;
        green = 8'b0;
        blue = 8'b0;
        video_on = 1'b0;

        // Example: Draw the trains and tracks
        if ((pixel_row == 0 || pixel_row == 59 || pixel_row == 520 || pixel_row == 639) ||
            (pixel_column == 0 || pixel_column == 59 || pixel_column == 421 || pixel_column == 479)) begin
            red = 8'b11111111; // Red for external track
            video_on = 1'b1;
        end else if ((pixel_row == 120 || pixel_row == 519) ||
                     (pixel_column == 60 || pixel_column == 420)) begin
            green = 8'b11111111; // Green for internal track
            video_on = 1'b1;
        end else if ((pixel_row >= 0 && pixel_row <= 59) &&
                     (pixel_column >= train_a_pos && pixel_column <= train_a_pos + 20)) begin
            blue = 8'b11111111; // Blue for train A
            video_on = 1'b1;
        end else if ((pixel_row >= 120 && pixel_row <= 519) &&
                     (pixel_column >= train_b_pos && pixel_column <= train_b_pos + 20)) begin
            red = 8'b11111111; // Red for train B
            video_on = 1'b1;
        end
    end
endmodule
